"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const chai_1 = require("chai");
const mock = require("mock-fs");
const package_json_1 = require("../../package.json");
const utils = require("./utils");
describe('utils', () => {
    describe('parseUrl', () => {
        it('given a url without protocol', () => {
            const url = 'foobar.com';
            chai_1.assert.deepEqual(utils.parseUrl(url), `http://${url}`);
        });
        it('given a url with a protocol', () => {
            const url = 'http://foobar.com';
            chai_1.assert.deepEqual(utils.parseUrl(url), url);
        });
    });
    describe('parseBrowser', () => {
        it('given an unknown browser returns error', () => {
            chai_1.assert.throws(() => utils.parseBrowser('foobar'));
        });
        it('given no browser returns chrome-headless', () => {
            chai_1.assert.deepEqual(utils.parseBrowser(), 'chrome-headless');
        });
        describe('returns firefox', () => {
            const firefoxBrowsers = ['ff', 'firefox', 'gecko', 'marionette'];
            for (const firefoxBrowser of firefoxBrowsers) {
                it(`given ${firefoxBrowser} returns firefox`, () => {
                    chai_1.assert.deepEqual(utils.parseBrowser(firefoxBrowser), 'firefox');
                });
            }
        });
        describe('returns chrome', () => {
            it('given chrome returns chrome', () => {
                chai_1.assert.deepEqual(utils.parseBrowser('chrome'), 'chrome');
            });
        });
        describe('returns ie', () => {
            const ieBrowsers = [
                'ie',
                'explorer',
                'internetexplorer',
                'internet_explorer',
                'internet-explorer'
            ];
            for (const ieBrowser of ieBrowsers) {
                it(`given ${ieBrowser} returns ie`, () => {
                    chai_1.assert.deepEqual(utils.parseBrowser(ieBrowser), 'ie');
                });
            }
        });
        describe('returns safari', () => {
            it('given safari return safari', () => {
                chai_1.assert.deepEqual(utils.parseBrowser('safari'), 'safari');
            });
        });
        describe('returns edge', () => {
            const edgeBrowsers = ['edge', 'microsoftedge'];
            for (const edgeBrowser of edgeBrowsers) {
                it(`given ${edgeBrowser} returns MicrosoftEdge`, () => {
                    chai_1.assert.deepEqual(utils.parseBrowser(edgeBrowser), 'MicrosoftEdge');
                });
            }
        });
    });
    describe('getAxeSource', () => {
        describe('mock file', () => {
            beforeEach(() => {
                mock({
                    '/node_modules/axe-core': {},
                    '../node_modules/axe-core': {
                        'axe.js': mock.load(require.resolve('axe-core'))
                    }
                });
            });
            afterEach(() => {
                mock.restore();
            });
            it('fall back to use `locally` installed axe-core', () => {
                const axeSource = utils.getAxeSource();
                const axeVersionCheck = package_json_1.dependencies['axe-core'].replace('^', '');
                chai_1.assert.include(axeSource, axeVersionCheck);
            });
        });
        it('given no axe source use local source', () => {
            const axeSource = utils.getAxeSource();
            chai_1.assert.isNotNull(axeSource);
        });
        it('given invalid axe source throws error', () => {
            chai_1.assert.throws(() => utils.getAxeSource('././././'));
        });
    });
    describe('getAxeVersion', () => {
        it('given valid axe version returns only version', () => {
            chai_1.assert.deepEqual(utils.getAxeVersion(`axe.version = '4.1.1'`), '4.1.1');
        });
        it('given invalid axe version returns unknown version string', () => {
            chai_1.assert.deepEqual(utils.getAxeVersion(`axe = '4.1.1'`), 'unknown version');
        });
    });
    describe('splitList', () => {
        it('given a comma delimited string returns array', () => {
            const delimited = 'foo,bar,baz';
            const array = utils.splitList(delimited);
            chai_1.assert.isArray(array);
            chai_1.assert.deepEqual(array, ['foo', 'bar', 'baz']);
        });
        it('given a single string returns an array', () => {
            const string = 'foo';
            const array = utils.splitList(string);
            chai_1.assert.isArray(array);
            chai_1.assert.deepEqual(array, ['foo']);
        });
    });
});
//# sourceMappingURL=utils.test.js.map