"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const utils_1 = require("../lib/utils");
const axe_test_urls_1 = require("../lib/axe-test-urls");
const events_1 = require("../lib/events");
const webdriver_1 = require("../lib/webdriver");
const cli = (args, url) => __awaiter(void 0, void 0, void 0, function* () {
    const { save, stdout, dir, exit, timer, showErrors, reporter: noReporter, chromeOptions, verbose, timeout, include, exclude, tags, rules, disable, loadDelay, chromedriverPath } = args;
    const silentMode = !!stdout;
    args.axeSource = (0, utils_1.getAxeSource)(args.axeSource);
    if (!args.axeSource) {
        console.error((0, utils_1.error)('Unable to find the axe-core source file'));
        process.exit(2);
    }
    args.browser = (0, utils_1.parseBrowser)(args.browser);
    /* istanbul ignore if */
    if (chromeOptions) {
        /* istanbul ignore if */
        if (args.browser !== 'chrome-headless') {
            console.error((0, utils_1.error)('You may only provide --chrome-options when using headless chrome'));
            process.exit(2);
        }
    }
    const driverConfigs = {
        browser: args.browser,
        timeout,
        chromeOptions,
        chromedriverPath
    };
    args.driver = (0, webdriver_1.startDriver)(driverConfigs);
    const cliReporter = (0, utils_1.reporter)(noReporter, silentMode);
    const axeVersion = (0, utils_1.getAxeVersion)(args.axeSource);
    if (!silentMode) {
        console.log(colors.bold('Running axe-core ' + axeVersion + ' in ' + args.browser));
    }
    const urls = url.args.map(utils_1.parseUrl);
    /* istanbul ignore if */
    if (urls.length === 0) {
        console.error((0, utils_1.error)('No url was specified. Check `axe --help` for help\n'));
    }
    const events = (0, events_1.default)({
        silentMode,
        timer,
        cliReporter,
        verbose,
        exit
    });
    const testPageConfigParams = {
        driver: args.driver,
        timer,
        loadDelay,
        axeSource: args.axeSource,
        include,
        exclude,
        tags,
        rules,
        disable
    };
    try {
        const outcome = yield (0, axe_test_urls_1.default)(urls, testPageConfigParams, events);
        if (silentMode) {
            process.stdout.write(JSON.stringify(outcome, null, 2));
            return;
        }
        if (timer) {
            console.timeEnd('Total test time');
        }
        /* istanbul ignore if */
        if (Array.isArray(outcome)) {
            console.log((0, utils_1.bold)('Testing complete of %d pages\n'), outcome.length);
        }
        if (save || dir) {
            try {
                const fileName = (0, utils_1.saveOutcome)(outcome, save, dir);
                console.log('Saved file at', fileName, '\n');
            }
            catch (e) {
                /* istanbul ignore next */
                console.error((0, utils_1.error)('Unable to save file!\n') + e);
                process.exit(1);
            }
        }
        /* istanbul ignore if */
        if (silentMode) {
            return;
        }
        console.log((0, utils_1.italics)('Please note that only 20% to 50% of all accessibility ' +
            'issues can automatically be detected. \nManual testing is ' +
            'always required. For more information see:\n%s\n'), (0, utils_1.link)('https://dequeuniversity.com/curriculum/courses/testingmethods'));
    }
    catch (e) {
        /* istanbul ignore else */
        if (!showErrors) {
            console.error((0, utils_1.error)('An error occurred while testing this page.'));
        }
        else {
            console.error((0, utils_1.error)('Error: %s'), e);
        }
        console.error('Please report the problem to: ' +
            (0, utils_1.link)('https://github.com/dequelabs/axe-core-npm/issues/') +
            '\n');
        process.exit(1);
    }
});
exports.default = cli;
//# sourceMappingURL=index.js.map