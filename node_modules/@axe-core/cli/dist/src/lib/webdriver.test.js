"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const chai_1 = require("chai");
const webdriver_1 = require("./webdriver");
const chromedriver = require("chromedriver");
const chrome = require("selenium-webdriver/chrome");
const path = require("path");
describe('startDriver', () => {
    let config;
    let browser;
    beforeEach(() => {
        browser = 'chrome-headless';
        config = {
            get browser() {
                return browser;
            }
        };
    });
    afterEach(() => __awaiter(void 0, void 0, void 0, function* () {
        const service = chrome.getDefaultService();
        if (service.isRunning()) {
            yield service.kill();
        }
    }));
    it('creates a driver', () => __awaiter(void 0, void 0, void 0, function* () {
        const driver = yield (0, webdriver_1.startDriver)(config);
        chai_1.assert.isObject(driver);
        chai_1.assert.isFunction(driver.manage);
    }));
    xit('sets the config.browser as the browser', () => __awaiter(void 0, void 0, void 0, function* () {
        browser = 'chrome';
        const driver = yield (0, webdriver_1.startDriver)(config);
        const capabilities = yield driver.getCapabilities();
        chai_1.assert.equal(capabilities.get('browserName'), browser);
    }));
    it('sets the browser as chrome with chrome-headless', () => __awaiter(void 0, void 0, void 0, function* () {
        browser = 'chrome-headless';
        const driver = yield (0, webdriver_1.startDriver)(config);
        const capabilities = yield driver.getCapabilities();
        chai_1.assert.equal(capabilities.get('browserName'), 'chrome');
    }));
    it('uses the chromedriver path with chrome-headless', () => __awaiter(void 0, void 0, void 0, function* () {
        browser = 'chrome-headless';
        yield (0, webdriver_1.startDriver)(config);
        const service = chrome.getDefaultService();
        chai_1.assert.equal(service.executable_, chromedriver.path);
    }));
    it('uses the passed in chromedriver path with chrome-headless', () => __awaiter(void 0, void 0, void 0, function* () {
        browser = 'chrome-headless';
        config.chromedriverPath = path.relative(process.cwd(), chromedriver.path);
        yield (0, webdriver_1.startDriver)(config);
        const service = chrome.getDefaultService();
        chai_1.assert.notEqual(config.chromedriverPath, chromedriver.path);
        chai_1.assert.equal(service.executable_, config.chromedriverPath);
    }));
    it('passes the --no-sandbox argument to chromeOptions', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        browser = 'chrome-headless';
        config.chromeOptions = ['--no-sandbox'];
        yield (0, webdriver_1.startDriver)(config);
        const options = (_a = config === null || config === void 0 ? void 0 : config.builder) === null || _a === void 0 ? void 0 : _a.getChromeOptions();
        chai_1.assert.isArray(options === null || options === void 0 ? void 0 : options.get('goog:chromeOptions').args);
        chai_1.assert.deepEqual(options === null || options === void 0 ? void 0 : options.get('goog:chromeOptions').args, [
            'headless',
            '--no-sandbox'
        ]);
    }));
    it('passes multiple arguments argument to chromeOptions', () => __awaiter(void 0, void 0, void 0, function* () {
        var _b;
        browser = 'chrome-headless';
        config.chromeOptions = ['no-sandbox', 'disable-dev-shm-usage'];
        yield (0, webdriver_1.startDriver)(config);
        const options = (_b = config === null || config === void 0 ? void 0 : config.builder) === null || _b === void 0 ? void 0 : _b.getChromeOptions();
        chai_1.assert.isArray(options === null || options === void 0 ? void 0 : options.get('goog:chromeOptions').args);
        chai_1.assert.deepEqual(options === null || options === void 0 ? void 0 : options.get('goog:chromeOptions').args, [
            'headless',
            'no-sandbox',
            'disable-dev-shm-usage'
        ]);
    }));
    it('sets the --timeout flag', () => __awaiter(void 0, void 0, void 0, function* () {
        browser = 'chrome-headless';
        config.timeout = 10000;
        const driver = yield (0, webdriver_1.startDriver)(config);
        config.builder;
        const timeoutValue = yield driver.manage().getTimeouts();
        chai_1.assert.isObject(timeoutValue);
        chai_1.assert.deepEqual(timeoutValue.script, 10000000);
    }));
});
//# sourceMappingURL=webdriver.test.js.map