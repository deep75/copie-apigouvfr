"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.italics = exports.green = exports.bold = exports.error = exports.link = exports.reporter = exports.selectorToString = exports.splitList = exports.getAxeVersion = exports.getAxeSource = exports.parseBrowser = exports.parseUrl = exports.saveOutcome = void 0;
const fs = require("fs");
const path = require("path");
const colors = require("colors");
const saveOutcome = (outcome, fileName, dir) => {
    if (typeof fileName !== 'string') {
        fileName = 'axe-results-' + Date.now() + '.json';
    }
    /* istanbul ignore if */
    if (typeof dir !== 'string') {
        dir = process.cwd();
    }
    else if (!path.isAbsolute(dir)) {
        dir = path.join(process.cwd(), dir);
    }
    const filePath = path.join(dir, fileName);
    /* istanbul ignore else */
    if (!fs.existsSync(filePath)) {
        fs.mkdirSync(dir, { recursive: true });
    }
    fs.writeFileSync(filePath, JSON.stringify(outcome, null, 2), 'utf-8');
    return filePath;
};
exports.saveOutcome = saveOutcome;
const parseUrl = (url) => {
    if (!/[a-z]+:\/\//.test(url)) {
        return 'http://' + url;
    }
    return url;
};
exports.parseUrl = parseUrl;
const parseBrowser = (browser) => {
    if (!browser) {
        return 'chrome-headless';
    }
    const l = browser.length;
    switch (browser.toLowerCase()) {
        case 'ff':
        case 'firefox'.substr(0, l):
        case 'gecko'.substr(0, l):
        case 'marionette'.substr(0, l):
            return 'firefox';
        case 'chrome'.substr(0, l):
            return 'chrome';
        case 'ie':
        case 'explorer'.substr(0, l):
        case 'internetexplorer'.substr(0, l):
        case 'internet_explorer'.substr(0, l):
        case 'internet-explorer'.substr(0, l):
            return 'ie';
        case 'safari'.substr(0, l):
            return 'safari';
        case 'edge'.substr(0, l):
        case 'microsoftedge'.substr(0, l):
            return 'MicrosoftEdge';
        default:
            throw new Error('Unknown browser ' + browser);
    }
};
exports.parseBrowser = parseBrowser;
const getAxeSource = (axePath) => {
    // Abort if axePath should exist, and it isn't
    if (axePath && !fs.existsSync(axePath)) {
        return;
    }
    // Look for axe in current working directory
    if (!axePath) {
        axePath = path.join(process.cwd(), 'axe.js');
    }
    if (!fs.existsSync(axePath)) {
        // Look for axe in CWD ./node_modules
        axePath = path.join(process.cwd(), 'node_modules', 'axe-core', 'axe.js');
    }
    if (!fs.existsSync(axePath)) {
        // `__dirname` is /@axe-core/cli/dist/src/lib when installed globally
        // to access the locally installed axe-core package we need to go up 3 levels
        // if all else fails, use the locally installed axe
        axePath = path.join(__dirname, '..', '..', '..', 'node_modules', 'axe-core', 'axe.js');
    }
    return fs.readFileSync(axePath, 'utf-8');
};
exports.getAxeSource = getAxeSource;
const getAxeVersion = (source) => {
    const match = source.match(/\.version\s*=\s'([^']+)'/);
    return match ? match[1] : 'unknown version';
};
exports.getAxeVersion = getAxeVersion;
const splitList = (val) => {
    return val.split(/[,;]/).map(str => str.trim());
};
exports.splitList = splitList;
const selectorToString = (selectors, separator) => {
    separator = separator || ' ';
    return selectors
        .reduce((prev, curr) => prev.concat(curr), [])
        .join(separator);
};
exports.selectorToString = selectorToString;
const reporter = (noReporter, silentMode) => {
    if (!noReporter || silentMode) {
        return () => { };
    }
    else {
        return (...args) => {
            console.log(...args);
        };
    }
};
exports.reporter = reporter;
exports.link = colors.underline.blue;
exports.error = colors.red.bold;
exports.bold = colors.bold;
exports.green = colors.green;
exports.italics = colors.italic;
//# sourceMappingURL=utils.js.map